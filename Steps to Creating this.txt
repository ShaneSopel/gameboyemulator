Steps to coding this.

1. first we setup the cart. 
- created the rom header
- bool cart_load 
- cart_context
- const cart_lic_name
- const cart_type_name
- static LIC_CODE
- Static ROM_TYPES
- CPU Step without anything in it. except printf("CPU NO YET IMPLEMENTED");

2. Creating Address Bus 
- created address read and write bus_write, bus_read
- created cart read and write
- created CPU registers struct 
- created CPU Context
- add the op code instructions in instructions.h, and instructions.c 

3. create the CPU Instructions
 - created the cpu_proc.h and cpu_proc.c files
 
 4. fetching the data for the instructions
 implementing all the load instructions. 
 
 5. working RAM and HRAM functinality
 	ram.h and ram.c files were created.
 
 6. op push and pop functionality 
 op Jump relative (JR) , Jump (JP) functionality.
 op Call RET, RETI, and RST functionality
 
 7-8 worked on the cpu instruction set. 
 
 9- worked on interrupts and then the first of the actually UI implementation. 
 
 so basically the first 9 videos is just setting up the instruction set for the CPU.
 I am interested in how I can implement that in Rust. 
 
 10 - cpu bugs, create timer code, and display output of the blargg test. 
 
 11. start working on the PPU emulation. 
 
 12. state machine for PPU to work with lcd states.
 
 13. pixel fifo fetcher 
 
 14. add sprites into mix
 
 15. finish ppu and start gamepad functionality. 
 
 


